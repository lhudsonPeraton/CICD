pipeline {
  agent none
  stages {
    stage('Checkout react code from GitHub') {
      agent {
        docker { 
          image 'bitnami/git:latest' 
          args '--entrypoint=' // Jenkins-recommended way of dealing with an entrypoint issue
        }
      }
      steps {
        checkout scmGit(branches: [[name: '*/main']], extensions: [cleanBeforeCheckout()], userRemoteConfigs: [[url: 'https://github.com/lhudsonPeraton/React.git']])
        sh 'ls -al'
      }
      post {
        success {
          stash includes: '**', name: 'react-code'
        }
      }
    }
    stage('Checkout CICD code from GitHub') {
      agent {
        docker { 
          image 'bitnami/git:latest' 
          args '--entrypoint=' // Jenkins-recommended way of dealing with an entrypoint issue
        }
      }
      steps {
        checkout scmGit(branches: [[name: '*/main']], extensions: [cleanBeforeCheckout()], userRemoteConfigs: [[url: 'https://github.com/lhudsonPeraton/CICD.git']])
        sh 'ls -al'
      }
      post {
        success {
          dir('./react-image') {
            stash includes: 'Dockerfile', name: 'CICD-code'
          }
        }
      }
    }
    
    stage('Build and Deploy React App') {
      agent {
        docker { 
          image 'docker:dind' 
          args '--entrypoint=' // Jenkins-recommended way of dealing with an entrypoint issue
        }
      }
      environment {
        DOCKER_TLS_VERIFY = '1'

        // I defined "host.docker.internal" under:
        // Manage Jenkins > System > Global properties > Environment variables
        // This is the same value as the "Gateway" used with the agent container.
        // <Gateway>:2376
        DOCKER_HOST = "tcp://$DOCKER_API_HOST"

        // Prevent docker from trying to interact with directories
        // that it does not have permission to access.
        HOME = "${env.WORKSPACE}"
      }
      stages {
        stage('Build React Image') {
          steps {
            unstash 'react-code'
            unstash 'CICD-code'
            withCredentials([dockerCert(credentialsId: 'docker-tls-certs', variable: 'DOCKER_CERT_PATH')]) {
              sh 'DOCKER_CERT_PATH="$DOCKER_CERT_PATH"'
              sh 'docker info'
              sh 'ls -al'
              sh 'docker build -t react:demo .'
            }
          }
        }
        stage('Deploy React App') {
          steps {
            withCredentials([dockerCert(credentialsId: 'docker-tls-certs', variable: 'DOCKER_CERT_PATH')]) {
              sh 'DOCKER_CERT_PATH="$DOCKER_CERT_PATH"'
              sh 'docker info'
              sh 'docker run -p 8090:8080 react:demo'
            }
          }
        }
      }
    }
  }
}